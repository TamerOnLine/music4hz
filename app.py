# app.py
"""
music4hz - unified CLI

Subcommands:
  - bg   : generate background ambient (rain, wind, sea, snow, trees, silence)
  - tone : generate brainwave tones (binaural / isochronic / both)

Examples:
  # Background:
  python app.py bg --name wind --minutes 20 --level 0.25 --out out/wind

  # Tone (theta 4 Hz, both modes, with metadata):
  python app.py tone --freq 4 --minutes 30 --mode both --out out/theta \
    --title-prefix "music4hz" --artist "TamerOnLine" --email "info@tameronline.com"

Notes:
  - Background generators depend on bg_utils.py being present (SR, filters, etc.).
  - tone subcommand imports from sound.py (make/save_wav/set_wav_metadata).
"""

from __future__ import annotations
import argparse
import os
from pathlib import Path
from typing import Callable, Dict

import numpy as np

# ---- imports for background generators
import rain, wind, sea, snow, trees, silence
from bg_utils import SR, stereo_normalize

# ---- reuse IO + synthesis helpers from sound.py
from sound import make as make_tone
from sound import save_wav, set_wav_metadata


# ---------- Background registry ----------
def _bg_registry() -> Dict[str, Callable[[int, float, int | None], np.ndarray]]:
    """
    Returns mapping: name -> callable(duration_sec, level, seed) -> stereo float32
    """
    return {
        "rain": lambda dur, lvl, seed: rain.generate_rain(dur, level=lvl, seed=seed),
        "wind": lambda dur, lvl, seed: wind.generate_wind(dur, level=lvl, seed=seed),
        "sea": lambda dur, lvl, seed: sea.generate_sea(dur, level=lvl, seed=seed),
        "snow": lambda dur, lvl, seed: snow.generate_snow(dur, level=lvl, seed=seed),
        "trees": lambda dur, lvl, seed: trees.generate_trees(dur, level=lvl, seed=seed),
        "silence": lambda dur, lvl, seed: silence.generate_silence(dur, level=0.0, seed=seed),
    }


# ---------- BG command ----------
def cmd_bg(args: argparse.Namespace) -> int:
    reg = _bg_registry()
    name = args.name.lower()
    if name not in reg:
        print(f"! Unknown background name: {name}")
        print("  Available:", ", ".join(sorted(reg.keys())))
        return 2

    duration_sec = int(args.minutes * 60)
    level = float(args.level)
    seed = None if args.seed < 0 else int(args.seed)

    print(f"> Generating background: {name} | {args.minutes} min | level={level} | SR={SR} | seed={seed}")
    stereo = reg[name](duration_sec, level, seed)
    stereo = stereo_normalize(stereo, level=level)

    outdir = Path(args.out)
    outdir.mkdir(parents=True, exist_ok=True)
    out_path = outdir / f"{name}_{args.minutes:g}m.wav"

    save_wav(str(out_path), stereo, SR)
    # Simple metadata
    set_wav_metadata(
        str(out_path),
        title=f"{name} {args.minutes:g}m",
        artist=args.artist or "",
        comment="Generated by music4hz (ambient)",
        year=args.year or "",
        copyright_=args.copyright or "",
        url=args.url or "",
        email=args.email or "",
        artwork_path=args.artwork or "",
    )
    print(f"✓ Saved: {out_path}")
    return 0


# ---------- Tone command ----------
def cmd_tone(args: argparse.Namespace) -> int:
    duration_sec = int(args.minutes * 60)

    print(
        f"> Generating tone: {args.mode} | {args.freq:g} Hz | {args.minutes} min | "
        f"amp={args.amp} | SR={args.sr} | binaural={tuple(args.binaural)} | iso-carrier={args.iso_carrier}"
    )

    binaural, iso, sr = make_tone(
        beat_hz=float(args.freq),
        duration_sec=duration_sec,
        sr=int(args.sr),
        binaural_carriers=(float(args.binaural[0]), float(args.binaural[1])),
        iso_carrier=float(args.iso_carrier),
        amp=float(args.amp),
    )

    outdir = Path(args.out)
    outdir.mkdir(parents=True, exist_ok=True)

    wrote_any = False
    if args.mode in ("binaural", "both"):
        p = outdir / f"{args.freq:g}hz_binaural.wav"
        save_wav(str(p), binaural, sr)
        set_wav_metadata(
            str(p),
            title=f"{args.title_prefix} {args.freq:g} Hz Binaural".strip(),
            artist=args.artist,
            comment="Generated by music4hz",
            year=args.year,
            copyright_=args.copyright,
            url=args.url,
            email=args.email,
            artwork_path=args.artwork,
        )
        print(f"✓ Saved: {p}")
        wrote_any = True

    if args.mode in ("iso", "both"):
        p = outdir / f"{args.freq:g}hz_iso.wav"
        save_wav(str(p), iso, sr)
        set_wav_metadata(
            str(p),
            title=f"{args.title_prefix} {args.freq:g} Hz Isochronic".strip(),
            artist=args.artist,
            comment="Generated by music4hz",
            year=args.year,
            copyright_=args.copyright,
            url=args.url,
            email=args.email,
            artwork_path=args.artwork,
        )
        print(f"✓ Saved: {p}")
        wrote_any = True

    if not wrote_any:
        print("! Nothing written (check --mode).")
        return 2

    return 0


# ---------- CLI ----------
def build_parser() -> argparse.ArgumentParser:
    p = argparse.ArgumentParser(description="music4hz - ambient & brainwave tone generator")
    sub = p.add_subparsers(dest="subcmd", required=True)

    # bg subcommand
    bg = sub.add_parser("bg", help="Generate background ambient (rain/wind/sea/snow/trees/silence)")
    bg.add_argument("--name", choices=sorted(_bg_registry().keys()), required=True, help="Ambient name")
    bg.add_argument("--minutes", type=float, default=30.0, help="Duration in minutes")
    bg.add_argument("--level", type=float, default=0.25, help="Target peak level [0..1]")
    bg.add_argument("--seed", type=int, default=-1, help="Random seed (negative = random)")
    bg.add_argument("--out", default="out", help="Output directory")

    # basic metadata for bg files (optional)
    bg.add_argument("--title-prefix", default="", help="(unused for bg; kept for parity)")
    bg.add_argument("--artist", default="TamerOnLine")
    bg.add_argument("--year", default="2025")
    bg.add_argument("--copyright", default="© 2025 TamerOnLine. All rights reserved.")
    bg.add_argument("--url", default="https://tameronline.com")
    bg.add_argument("--email", default="info@tameronline.com")
    bg.add_argument("--artwork", default="image/logo.png")

    bg.set_defaults(func=cmd_bg)

    # tone subcommand
    tone = sub.add_parser("tone", help="Generate binaural/isochronic tones")
    tone.add_argument("--mode", choices=["binaural", "iso", "both"], default="both", help="Tone mode")
    tone.add_argument("--minutes", type=float, default=30.0, help="Duration in minutes")
    tone.add_argument("--freq", type=float, default=4.0, help="Beat frequency (Hz)")
    tone.add_argument("--amp", type=float, default=0.3, help="Amplitude [0..1]")
    tone.add_argument("--binaural", type=float, nargs=2, metavar=("L", "R"), default=(220.0, 224.0))
    tone.add_argument("--iso-carrier", type=float, default=400.0)
    tone.add_argument("--sr", type=int, default=44100)
    tone.add_argument("--out", default="out", help="Output directory")

    # metadata
    tone.add_argument("--title-prefix", default="music4hz", help="Prefix for track titles")
    tone.add_argument("--artist", default="TamerOnLine")
    tone.add_argument("--year", default="2025")
    tone.add_argument("--copyright", default="© 2025 TamerOnLine. All rights reserved.")
    tone.add_argument("--url", default="https://tameronline.com")
    tone.add_argument("--email", default="info@tameronline.com")
    tone.add_argument("--artwork", default="image/logo.png", help="Path to PNG/JPEG cover")

    tone.set_defaults(func=cmd_tone)

    return p


def main() -> int:
    parser = build_parser()
    args = parser.parse_args()
    return args.func(args)


if __name__ == "__main__":
    raise SystemExit(main())
