"""
music4hz — unified CLI (profiles-based BG + tones)

Subcommands:
  - bg   : Generate ambient backgrounds from JSON profiles (dynamic from profiles folder)
  - tone : Generate brainwave tones (binaural / isochronic / both) via sound.py

Examples:
  python app.py bg   --name sea  --minutes 5 --seed 42 --out out/sea
  python app.py tone --mode both --freq 4    --minutes 30 --out out/theta
"""

from __future__ import annotations
import argparse
import os
from pathlib import Path

from bg_utils import SR
from bg_core.engine import run_profile
from sound import make as make_tone, save_wav, set_wav_metadata


# ---------------- BG (profiles) ----------------
def cmd_bg(args: argparse.Namespace) -> int:
    profiles_dir = Path(args.profiles_dir)
    profile_path = profiles_dir / f"{args.name}.json"
    if not profile_path.exists():
        raise FileNotFoundError(f"Profile not found: {profile_path}")

    seed = None if args.seed < 0 else int(args.seed)
    level = None if args.level < 0 else float(args.level)

    print(f"> BG profile: {args.name} | {args.minutes} min | seed={seed}")
    st = run_profile(str(profile_path), args.minutes, seed=seed, level=level)

    outdir = Path(args.out)
    outdir.mkdir(parents=True, exist_ok=True)
    out_path = outdir / f"{args.name}_{args.minutes:g}m.wav"

    save_wav(str(out_path), st, SR)
    set_wav_metadata(
        str(out_path),
        title=f"{args.title_prefix} {args.name} {args.minutes:g}m".strip(),
        artist=args.artist,
        comment="Generated by music4hz (ambient)",
        year=args.year,
        copyright_=args.copyright,
        url=args.url,
        email=args.email,
        artwork_path=args.artwork,
    )
    print(f"✓ Saved: {out_path}")
    return 0


# ---------------- Tones (sound.py) ----------------
def cmd_tone(args: argparse.Namespace) -> int:
    duration_sec = int(args.minutes * 60)

    print(
        f"> Tone: mode={args.mode} | beat={args.freq:g} Hz | minutes={args.minutes} | "
        f"amp={args.amp} | sr={args.sr} | binaural={tuple(args.binaural)} | iso_carrier={args.iso_carrier}"
    )

    binaural, iso, sr = make_tone(
        beat_hz=float(args.freq),
        duration_sec=duration_sec,
        sr=int(args.sr),
        binaural_carriers=(float(args.binaural[0]), float(args.binaural[1])),
        iso_carrier=float(args.iso_carrier),
        amp=float(args.amp),
    )

    outdir = Path(args.out)
    outdir.mkdir(parents=True, exist_ok=True)

    wrote_any = False
    if args.mode in ("binaural", "both"):
        p = outdir / f"{args.freq:g}hz_binaural.wav"
        save_wav(str(p), binaural, sr)
        set_wav_metadata(
            str(p),
            title=f"{args.title_prefix} {args.freq:g} Hz Binaural".strip(),
            artist=args.artist,
            comment="Generated by music4hz",
            year=args.year,
            copyright_=args.copyright,
            url=args.url,
            email=args.email,
            artwork_path=args.artwork,
        )
        print(f"✓ Saved: {p}")
        wrote_any = True

    if args.mode in ("iso", "both"):
        p = outdir / f"{args.freq:g}hz_iso.wav"
        save_wav(str(p), iso, sr)
        set_wav_metadata(
            str(p),
            title=f"{args.title_prefix} {args.freq:g} Hz Isochronic".strip(),
            artist=args.artist,
            comment="Generated by music4hz",
            year=args.year,
            copyright_=args.copyright,
            url=args.url,
            email=args.email,
            artwork_path=args.artwork,
        )
        print(f"✓ Saved: {p}")
        wrote_any = True

    if not wrote_any:
        print("! Nothing written (check --mode).")
        return 2

    return 0


# ---------------- CLI ----------------
def list_profiles(profiles_dir="profiles"):
    """Return list of available profile names from profiles_dir."""
    if not os.path.isdir(profiles_dir):
        return []
    return [
        os.path.splitext(f)[0]
        for f in os.listdir(profiles_dir)
        if f.lower().endswith(".json")
    ]


def build_parser() -> argparse.ArgumentParser:
    p = argparse.ArgumentParser(description="music4hz - ambient (profiles) & brainwave tone generator")
    sub = p.add_subparsers(dest="subcmd", required=False)  # keep False so `python app.py` exits 0 for CI

    # bg subcommand (profiles)
    names = list_profiles()
    bg = sub.add_parser("bg", help="Generate ambient from JSON profiles")
    bg.add_argument("--name", choices=names, required=True)
    bg.add_argument("--minutes", type=float, default=5.0)
    bg.add_argument("--level", type=float, default=-1.0, help="-1 = use profile default")
    bg.add_argument("--seed", type=int, default=-1)
    bg.add_argument("--out", default="out")
    bg.add_argument("--profiles-dir", default="profiles", help="Directory containing <name>.json profiles")

    # optional metadata
    bg.add_argument("--title-prefix", default="music4hz")
    bg.add_argument("--artist", default="TamerOnLine")
    bg.add_argument("--year", default="2025")
    bg.add_argument("--copyright", default="© 2025 TamerOnLine. All rights reserved.")
    bg.add_argument("--url", default="https://tameronline.com")
    bg.add_argument("--email", default="info@tameronline.com")
    bg.add_argument("--artwork", default="image/logo.png")
    bg.set_defaults(func=cmd_bg)

    # tone subcommand
    tone = sub.add_parser("tone", help="Generate binaural/isochronic tones (sound.py)")
    tone.add_argument("--mode", choices=["binaural", "iso", "both"], default="both")
    tone.add_argument("--minutes", type=float, default=30.0)
    tone.add_argument("--freq", type=float, default=4.0, help="Beat frequency (Hz)")
    tone.add_argument("--amp", type=float, default=0.3)
    tone.add_argument("--binaural", type=float, nargs=2, metavar=("L", "R"), default=(220.0, 224.0))
    tone.add_argument("--iso-carrier", type=float, default=400.0)
    tone.add_argument("--sr", type=int, default=44100)
    tone.add_argument("--out", default="out")
    # metadata
    tone.add_argument("--title-prefix", default="music4hz")
    tone.add_argument("--artist", default="TamerOnLine")
    tone.add_argument("--year", default="2025")
    tone.add_argument("--copyright", default="© 2025 TamerOnLine. All rights reserved.")
    tone.add_argument("--url", default="https://tameronline.com")
    tone.add_argument("--email", default="info@tameronline.com")
    tone.add_argument("--artwork", default="image/logo.png")
    tone.set_defaults(func=cmd_tone)

    return p


def main() -> int:
    parser = build_parser()
    args, _ = parser.parse_known_args()
    if not getattr(args, "subcmd", None):
        parser.print_help()
        return 0  # keep CI happy when called without args
    return args.func(args)


if __name__ == "__main__":
    raise SystemExit(main())
